<%= content_for :head do %>
  <%= ext :debug => true, :include_stylesheets => true %>
  <%= ext_direct_provider "Rails" %>

  <%= stylesheet_link_tag do %>
  body {
	font-family: helvetica, tahoma, verdana, sans-serif;
	padding: 20px;
	padding-top: 32px;
	font-size: 13px;
}

.x-body {
	font-family: helvetica, tahoma, verdana, sans-serif;
	font-size: 13px;
}

p {
	margin-bottom: 15px;
}

h1 {
	font-size: 18px;
	margin-bottom: 20px;
}

h2 {
	font-size: 14px;
	color: #333;
	font-weight: bold;
	margin: 10px 0;
}

.example-info {
	width: 150px;
	border: 1px solid #c3daf9;
	border-top: 1px solid #DCEAFB;
	border-left: 1px solid #DCEAFB;
	background: #ecf5fe url( info-bg.gif ) repeat-x;
	font-size: 10px;
	padding: 8px;
}

pre.code {
	background: #F8F8F8;
	border: 1px solid #e8e8e8;
	padding: 10px;
	margin: 10px;
	margin-left: 0px;
	border-left: 5px solid #e8e8e8;
	font-size: 12px !important;
	line-height: 14px !important;
}

.msg .x-box-mc {
	font-size: 14px;
}

#msg-div {
	position: absolute;
	left: 35%;
	top: 10px;
	width: 300px;
	z-index: 20000;
}

#out {
	padding: 5px;
	overflow: auto;
	border-width: 0;
}

#out b {
	color: #555;
}

#out xmp {
	margin: 5px;
}

#out p {
	margin: 0;
}

.combo-result-item {
	padding: 2px;
	border: 1px solid #FFFFFF;
}

.combo-name {
	font-weight: bold;
	font-size: 11px;
	background-color: #FFFF99;
}

.combo-full-address {
	font-size: 11px;
	color: #666666;
}

#msg-div .msg {
	border-radius: 8px;
	-moz-border-radius: 8px;
	background: #F6F6F6;
	border: 2px solid #ccc;
	margin-top: 2px;
	padding: 10px 15px;
	color: #555;
}

#msg-div .msg h3 {
	margin: 0 0<%= ext_direct_provider "Rails" %>
 8px;
	font-weight: bold;
	font-size: 15px;
}

#msg-div .msg p {
	margin: 0;
}

.x-grid3-row-body p {
	margin: 5px 5px 10px 5px !important;
}

table.features td {
	vertical-align: top;
	border-right: thin solid;
	padding-right: 7px;
	padding-left: 7px;
}

table.features td.last {
	border: none;
}

.feature-list {
	margin-bottom: 15px;
}

.feature-list li {
	list-style: square;
	margin-left: 17px;
	margin-bottom: 4px;
}
  <% end %>




<%= javascript_tag do %>

/*
This file is part of Ext JS 3.4

Copyright (c) 2011-2012 Sencha Inc

Contact:  http://www.sencha.com/contact

Commercial Usage
Licensees holding valid commercial licenses may use this file in accordance with the Commercial
Software License Agreement provided with the Software or, alternatively, in accordance with the
terms contained in a written agreement between you and Sencha.

If you are unsure which license is appropriate for your use, please contact the sales department
at http://www.sencha.com/contact.

Build date: 2012-07-26 18:41:31 (${git.current.hash})
*/
Ext.ns('Ext.ux.form');

/**
 * @class Ext.ux.form.FileUploadField
 * @extends Ext.form.TextField
 * Creates a file upload field.
 * @xtype fileuploadfield
 */
Ext.ux.form.FileUploadField = Ext.extend(Ext.form.TextField,  {
    /**
     * @cfg {String} buttonText The button text to display on the upload button (defaults to
     * 'Browse...').  Note that if you supply a value for {@link #buttonCfg}, the buttonCfg.text
     * value will be used instead if available.
     */
    buttonText: 'Browse...',
    /**
     * @cfg {Boolean} buttonOnly True to display the file upload field as a button with no visible
     * text field (defaults to false).  If true, all inherited TextField members will still be available.
     */
    buttonOnly: false,
    /**
     * @cfg {Number} buttonOffset The number of pixels of space reserved between the button and the text field
     * (defaults to 3).  Note that this only applies if {@link #buttonOnly} = false.
     */
    buttonOffset: 3,
    /**
     * @cfg {Object} buttonCfg A standard {@link Ext.Button} config object.
     */

    // private
    readOnly: true,

    /**
     * @hide
     * @method autoSize
     */
    autoSize: Ext.emptyFn,

    // private
    initComponent: function(){
        Ext.ux.form.FileUploadField.superclass.initComponent.call(this);

        this.addEvents(
            /**
             * @event fileselected
             * Fires when the underlying file input field's value has changed from the user
             * selecting a new file from the system file selection dialog.
             * @param {Ext.ux.form.FileUploadField} this
             * @param {String} value The file value returned by the underlying file input field
             */
            'fileselected'
        );
    },

    // private
    onRender : function(ct, position){
        Ext.ux.form.FileUploadField.superclass.onRender.call(this, ct, position);

        this.wrap = this.el.wrap({cls:'x-form-field-wrap x-form-file-wrap'});
        this.el.addClass('x-form-file-text');
        this.el.dom.removeAttribute('name');
        this.createFileInput();

        var btnCfg = Ext.applyIf(this.buttonCfg || {}, {
            text: this.buttonText
        });
        this.button = new Ext.Button(Ext.apply(btnCfg, {
            renderTo: this.wrap,
            cls: 'x-form-file-btn' + (btnCfg.iconCls ? ' x-btn-icon' : '')
        }));

        if(this.buttonOnly){
            this.el.hide();
            this.wrap.setWidth(this.button.getEl().getWidth());
        }

        this.bindListeners();
        this.resizeEl = this.positionEl = this.wrap;
    },

    bindListeners: function(){
        this.fileInput.on({
            scope: this,
            mouseenter: function() {
                this.button.addClass(['x-btn-over','x-btn-focus'])
            },
            mouseleave: function(){
                this.button.removeClass(['x-btn-over','x-btn-focus','x-btn-click'])
            },
            mousedown: function(){
                this.button.addClass('x-btn-click')
            },
            mouseup: function(){
                this.button.removeClass(['x-btn-over','x-btn-focus','x-btn-click'])
            },
            change: function(){
                var v = this.fileInput.dom.value;
                this.setValue(v);
                this.fireEvent('fileselected', this, v);
            }
        });
    },

    createFileInput : function() {
        this.fileInput = this.wrap.createChild({
            id: this.getFileInputId(),
            name: this.name||this.getId(),
            cls: 'x-form-file',
            tag: 'input',
            type: 'file',
            size: 1
        });
    },

    reset : function(){
        if (this.rendered) {
            this.fileInput.remove();
            this.createFileInput();
            this.bindListeners();
        }
        Ext.ux.form.FileUploadField.superclass.reset.call(this);
    },

    // private
    getFileInputId: function(){
        return this.id + '-file';
    },

    // private
    onResize : function(w, h){
        Ext.ux.form.FileUploadField.superclass.onResize.call(this, w, h);

        this.wrap.setWidth(w);

        if(!this.buttonOnly){
            var w = this.wrap.getWidth() - this.button.getEl().getWidth() - this.buttonOffset;
            this.el.setWidth(w);
        }
    },

    // private
    onDestroy: function(){
        Ext.ux.form.FileUploadField.superclass.onDestroy.call(this);
        Ext.destroy(this.fileInput, this.button, this.wrap);
    },

    onDisable: function(){
        Ext.ux.form.FileUploadField.superclass.onDisable.call(this);
        this.doDisable(true);
    },

    onEnable: function(){
        Ext.ux.form.FileUploadField.superclass.onEnable.call(this);
        this.doDisable(false);

    },

    // private
    doDisable: function(disabled){
        this.fileInput.dom.disabled = disabled;
        this.button.setDisabled(disabled);
    },


    // private
    preFocus : Ext.emptyFn,

    // private
    alignErrorIcon : function(){
        this.errorIcon.alignTo(this.wrap, 'tl-tr', [2, 0]);
    }

});

Ext.reg('fileuploadfield', Ext.ux.form.FileUploadField);

// backwards compat
Ext.form.FileUploadField = Ext.ux.form.FileUploadField;


Ext.onReady(function() {

  // provide feedback for any errors
  Ext.QuickTips.init();

  var languagesStore = new Ext.data.SimpleStore( {
    fields: [ 'name' ],
    data: [ [ 'Java' ], [ 'Javascript' ], [ 'C++' ], [ 'Perl' ], [ 'Python' ], [ 'Groovy' ], [ 'Scala' ] ]
  });

  var form = new Ext.FormPanel( {
    renderTo: Ext.getBody(),
    baseParams: {
      <%= request_forgery_protection_token %>: '<%= form_authenticity_token %>'
    },
    frame: true,
    fileUpload: true,
    width: 500,
    labelWidth: 180,
    defaults: {
      width: 300
    },
    defaultType: 'textfield',
    items: [ {
      xtype: 'datefield',
      fieldLabel: 'Pick a date',
      name: 'datefield'
    }, {
      xtype: 'combo',
      name: 'combo',
      fieldLabel: 'Favourite language',
      mode: 'local',
      store: languagesStore,
      displayField: 'name',
      forceSelection: true,
      triggerAction: 'all',
      valueField: 'name'
    }, {
      xtype: 'fileuploadfield',
      buttonOnly: false,
      id: 'form-file',
      fieldLabel: 'File (MUST be a text file)',
      name: 'fileUpload1',
      buttonCfg: {
        text: '...'
      }
    }, textArea1 = new Ext.form.TextArea( {
      name: 'textArea',
      fieldLabel: "File contents",
      height: 200,
      width: 200,
      disabled: true
    }), {
      xtype: 'checkbox',
      fieldLabel: ' I like Rails',
      name: 'checkbox',
      width: 15
    } ],
    api: {
      submit: Rails.ApplicationController.action3
    },
    buttons: [ {
      text: "Submit",
      handler: function() {
       form.getForm().submit( {
          success: function(form, action) {
            textArea1.setValue(action.result.fileContents);
          },
          failure: function(form, action) {
            switch (action.failureType) {
            case Ext.form.Action.CLIENT_INVALID:
              Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
              break;
            case Ext.form.Action.CONNECT_FAILURE:
              Ext.Msg.alert('Failure', 'Ajax communication failed');
              break;
            case Ext.form.Action.SERVER_INVALID:
              Ext.Msg.alert('Failure', action.result);
            }
          }
        });

      }
    }, {
      text: "Reset",
      handler: function() {
        form.getForm().reset();
      }
    } ]
  });

});
<% end %>



<% end %>
<h1>Test EXTJS 3.3.1</h1>

